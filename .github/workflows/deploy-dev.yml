# .github/workflows/deploy-dev.yml
name: Build and Deploy to Development Server
on:
  push:
    branches:
      - '*'  # 메인(main, master)을 제외한 모든 브랜치에서 동작하도록 설정
      - '!main'
      - '!master'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Check commit message for stop flag
        id: check-stop
        run: |
          if [[ "${{ github.event.head_commit.message }}" == *"[stop]"* ]]; then
            echo "stop=true" >> $GITHUB_OUTPUT
            echo "커밋 메시지에 [stop] 플래그가 감지되어 작업을 중단합니다."
            exit 0
          else
            echo "stop=false" >> $GITHUB_OUTPUT
            echo "계속 진행합니다."
          fi


      - name: Check commit message for reset flag
        id: check-reset
        run: |
          if [[ "${{ github.event.head_commit.message }}" == *"[reset]"* ]]; then
            echo "reset=true" >> $GITHUB_OUTPUT
            echo "커밋 메시지에 [reset] 플래그가 감지되었습니다."
          else
            echo "reset=false" >> $GITHUB_OUTPUT
            echo "일반 배포를 진행합니다."
          fi

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image (with cache)
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:dev
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:dev
          cache-to: type=inline

      - name: Deploy to Development Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            PROJECT_PATH="/home/kth88/services/HanyangAuto"
            DEPLOY_DIR="/home/kth88/services/HanyangAuto/dev"

            # Docker 이미지 및 환경 변수 설정
            export PROJECT_DIR="$PROJECT_PATH"
            export DOCKER_IMAGE="${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:dev"
            export DOMAIN=micro-hanyang.newme.dev
            export CONTAINER_NAME=hanyangauto-dev
            export PORT=8001
            export COMPOSE_PROJECT_NAME=hanyangauto-dev

            #########################
            # [reset] 플래그가 있는 경우 도커 이미지와 컨테이너를 모두 정리
            if [[ "${{ steps.check-reset.outputs.reset }}" == "true" ]]; then
              echo "=== [RESET] 모드: 도커 이미지와 컨테이너를 모두 정리합니다 ==="
              
              # 실행 중인 컨테이너 중지 및 제거
              docker stop $CONTAINER_NAME 2>/dev/null || echo "컨테이너가 이미 중지되었거나 존재하지 않습니다."
              docker rm $CONTAINER_NAME 2>/dev/null || echo "컨테이너가 이미 제거되었거나 존재하지 않습니다."
              # 도커 micro 태그 이미지만 제거
              docker rmi $DOCKER_IMAGE 2>/dev/null || echo "이미지가 이미 제거되었거나 존재하지 않습니다."
              # 사용하지 않는 도커 리소스 정리
              docker system prune -f
              
              echo "=== 도커 리소스 정리 완료 ==="
              echo "=== 프로젝트 디렉토리 정리 ==="
              rm -rf $PROJECT_PATH
              echo "=== 프로젝트 디렉토리 정리 완료 ==="
            fi
            #########################

            # 프로젝트 디렉토리가 존재하는지 확인
            if [ -d "$PROJECT_PATH" ]; then
              echo "프로젝트 디렉토리가 존재합니다. git pull을 시도합니다."
              cd "$PROJECT_PATH"
              git pull origin ${{ github.ref }}
            else
              echo "프로젝트 디렉토리가 존재하지 않습니다. gh repo clone을 시도합니다."
              cd "$DEPLOY_DIR"
              gh repo clone HanyangAuto
              cd "$PROJECT_PATH"
              # gh repo clone은 기본적으로 main 브랜치로 클론하므로, dev 브랜치로 체크아웃 후 pull
              git checkout ${{ github.ref }}|| git checkout -b ${{ github.ref }} origin/${{ github.ref }}
              git pull origin ${{ github.ref }}
            fi

            # Docker Compose로 배포 재시작
            chmod +x ./shFILES/start.sh
            ./shFILES/start.sh