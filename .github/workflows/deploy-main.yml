# .github/workflows/deploy-dev.yml
name: Build and Deploy to Product Server
on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest 
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image (with cache)
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest
          cache-to: type=inline

      - name: Deploy to Production Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            PROJECT_PATH="/home/kth88/services/product/HanyangAuto"
            DEPLOY_DIR="/home/kth88/services/product"

            # Docker 이미지 및 환경 변수 설정
            export PROJECT_DIR="$PROJECT_PATH"
            export DOCKER_IMAGE="${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest"
            export DOMAIN=hanyang.newme.dev
            export CONTAINER_NAME=hanyangauto
            export PORT=8000
            export COMPOSE_PROJECT_NAME=hanyangauto

            # 프로젝트 디렉토리가 존재하는지 확인
            if [ -d "$PROJECT_PATH" ]; then
              echo "프로젝트 디렉토리가 존재합니다. git pull을 시도합니다."
              cd "$PROJECT_PATH"
              git pull origin main
            else
              echo "프로젝트 디렉토리가 존재하지 않습니다. gh repo clone을 시도합니다."
              cd "$DEPLOY_DIR"
              gh repo clone HanyangAuto
              cd "$PROJECT_PATH"
            fi

            # Docker Compose로 배포 재시작
            chmod +x ./shFILES/start.sh
            ./shFILES/start.sh